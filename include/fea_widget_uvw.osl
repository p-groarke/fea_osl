// fea_widget_uvw osl libraries by Philippe Groarke
// Copyright 2022 Philippe Groarke, All rights reserved. This file is licensed under Apache 2.0 license
// https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt
#ifndef fea_widget_uvw_osl
#define fea_widget_uvw_osl
#include "C:\Users\groarkp\code\3dsmax-plugins\OSL\FeaOSL\include\fea_widget.osl"

#define fea_wgt_uvw_mode_opts \
	"Map Channel:0" \
	"|UVW Input:1" \
	"|Object Space (No UVWs):2" \
	"|World Space (No UVWs):3" \
	"|Camera Space (No UVWs):4"
	// "|Screen Space (No UVWs):5"

#define FEA_WGT_UVW_INPUTS \
	FEA_SPACER(201), \
	FEA_TITLE(201, "UVWs"), \
\
	int in_uvw_mode = 0 \
	[[ \
		string widget = "mapper", \
		string label = "UVW Mode", \
		string options = fea_wgt_uvw_mode_opts, \
		string help = "Select the UVW input mode.", \
		int connectable = 0, \
	]], \
	int in_uvw_map_channel = 1 \
	[[ \
		string label = "UVW Map Channel", \
		string help = "The 3ds max Map channel to look up. Used in 'Map Selection' mode.", \
		int min = 0, \
		int max = 99, \
		int connectable = 0, \
	]], \
	point in_uvw_input = 0 \
	[[ \
		string label = "UVW Input", \
		string help = "The UVW input map. Used in 'UVW Input' mode.", \
		string widget = "null", \
	]], \
	float in_uvw_scale = 1.0 \
	[[ \
		string label = "UVW Scale", \
		string help = "Scale your UVWs up or down. Remember to change scale when using 'No UVWs' modes.", \
		float min = 0.0001, \
		int connectable = 0, \
	]], \
	vector in_uvw_axis_scale = 1.0 \
	[[ \
		string label = "UVW Per-Axis Scale", \
		string help = "A per-axis scale. Works in addition to the single value scale.", \
		vector min = 0.0001, \
		int connectable = 0, \
	]], \
	point in_uvw_offset = 0.0 \
	[[ \
		string label = "UVW Offset", \
		string help = "Moves the UVW coordinate around.", \
		int connectable = 0, \
	]], \
	int in_uvw_wrap = 0 \
	[[ \
		string label = "UVW Wrap", \
		string help = "Wrap the resulting coordinates in a 0-1 range", \
		string widget = "checkBox", \
		int connectable = 0, \
	]]


struct fea_wgt_uvw_ret {
	point coord; // the coordinate to process
	string coord_space; // tangent, object, world, camera, etc
	vector scale; // per axis scale, including global scale (multiplied)
};
void fea_init(output fea_wgt_uvw_ret ret) {
	ret.coord = 0;
	ret.coord_space = "null";
	ret.scale = 0;
}

// Given the input parameters, computes the coordinate to evalute.
// Returns a helper struct with extra information.
// You can call the macro instead.
fea_wgt_uvw_ret fea_wgt_compute_uvw(int mode, int map_channel, point uvw_input,
		float scale, vector axis_scale, point offset, int wrap) {
	fea_wgt_uvw_ret ret;
	fea_init(ret);

	if (mode == 0) {
		// uvw map channel
		ret.coord_space = "tangent";

		// map selection
		if (!getattribute(format("UV%d", map_channel), ret.coord)) {
			// Get MAXtoA style UV
			float w = 0.0;

			// Default UV set handled in
			// a special way in MAXtoA
			if (map_channel == 1)
			{
				ret.coord = point(u,v,0);
				getattribute("w",  w);
			}
			else // ...the others are just attributes
			{
				getattribute(format("uv_%d", map_channel), ret.coord);
				getattribute(format("w_%d", map_channel), w);
			}
			// Insert 3rd dimension if any
			ret.coord[2] = w;
		}

		// Fix imprecision / undefined access in w component.
		// Much sadness was had.
		float eps = 1000000;
		ret.coord[2] = floor(ret.coord[2] * eps) / eps;

	} else if (mode == 1) {
		// uvw input param
		ret.coord_space = "tangent";
		ret.coord = uvw_input;
	} else if (mode == 2) {
		// object space
		ret.coord_space = "object";
		ret.coord = transform(ret.coord_space, P);
	} else if (mode == 3) {
		// world space
		ret.coord_space = "world";
		ret.coord = transform(ret.coord_space, P);
	} else if (mode == 4) {
		// camera space
		ret.coord_space = "camera";
		ret.coord = transform(ret.coord_space, P);
	} else if (mode == 5) {
		// screen space
		ret.coord_space = "screen";
		ret.coord = transform(ret.coord_space, P);
	}

	ret.scale = 1.0 / axis_scale / scale;
	ret.coord = (ret.coord - offset) * ret.scale;
	if (wrap) {
		ret.coord -= floor(ret.coord);
	}
	return ret;
}

#define FEA_WGT_GET_UVW \
	fea_wgt_compute_uvw(in_uvw_mode, in_uvw_map_channel, in_uvw_input, in_uvw_scale, in_uvw_axis_scale, in_uvw_offset, in_uvw_wrap)

#endif // fea_widget_uvw_osl
