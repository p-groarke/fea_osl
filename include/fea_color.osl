// fea_color osl libraries by Philippe Groarke
// Copyright 2022 Philippe Groarke, All rights reserved. This file is licensed under Apache 2.0 license
// https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt
#ifndef fea_color_osl
#define fea_color_osl
#include "D:\code\3dsmax-plugins\OSL\FeaOSL\include\fea.osl"

// fea_blend enum ui options.
#define fea_blend_opts \
		"None:0" \
		"|Replace:1" \
		"|Darken:3" \
		"|Multiply:4" \
		"|Color Burn:5" \
		"|Linear Burn:6" \
		/*"|Darker Color:7"*/ \
		"|Lighten:8" \
		"|Screen:9" \
		"|Color Dodge:10" \
		"|Linear Dodge (Add):11" \
		/*"|Lighter Color:12"*/ \
		"|Overlay:13" \
		"|Soft Light:14" \
		"|Hard Light:15" \
		"|Vivid Light:16" \
		"|Linear Light:17" \
		"|Pin Light:18" \
		"|Hard Mix:19" \
		"|Difference:20" \
		"|Exclusion:21" \
		"|Substract:22" \
		"|Divide:23" \
		/*"|Hue:24"*/ \
		/*"|Saturation:25"*/ \
		/*"|Color:26"*/ \
		/*"|Luminosity:27"*/ \
		"|Average:28"

// Blend 2 floats using typical color blend modes.
// 'bot' is base layer, 'top' is top layer.
float fea_blend(int blend_type, float bot, float top) {
	// http://www.simplefilter.de/en/basics/mixmods.html

	float ret = bot;
	if (blend_type == 0) {
		// none
		// ret = bot;
	} else if (blend_type == 1) {
		// replace
		ret = top;
	} else if (blend_type == 3) {
		// darken
		ret = min(bot, top);
	} else if (blend_type == 4) {
		// multiply
		ret = bot * top;
	} else if (blend_type == 5) {
		// color burn
		ret = 1.0 - (1.0 - bot) / top;
	} else if (blend_type == 6) {
		// linear burn
		ret = bot + top - 1.0;
	} else if (blend_type == 7) {
		// todo : darker color
	} else if (blend_type == 8) {
		// lighten
		ret = max(bot, top);
	} else if (blend_type == 9) {
		// screen
		ret = 1.0 - (1.0 - bot) * (1.0 - top);
	} else if (blend_type == 10) {
		// color dodge
		ret = bot / (1.0 - top);
	} else if (blend_type == 11) {
		// linear dodge (add)
		ret = bot + top;
	} else if (blend_type == 12) {
		// todo : lighter color
	} else if (blend_type == 13) {
		// overlay
		if (bot <= 0.5) {
			ret = 2.0 * bot * top;
		} else {
			ret = 1.0 - 2.0 * (1.0 - bot) * (1.0 - top);
		}
	} else if (blend_type == 14) {
		// soft light
		ret = (1.0 - 2.0 * top) * pow(bot, 2.0) + 2.0 * bot * top;
	} else if (blend_type == 15) {
		// hard light
		if (top <= 0.5) {
			ret = 2.0 * top * bot;
		} else {
			ret = 1.0 - 2.0 * (1.0 - top) * (1.0 - bot);
		}
	} else if (blend_type == 16) {
		// vivid light
		if (top <= 0.5) {
			ret = 1.0 - (1.0 - bot) / (2.0 * top);
		} else {
			ret = bot / (2.0 * (1.0 - top));
		}
	} else if (blend_type == 17) {
		// linear light
		ret = bot + 2.0 * top - 1.0;
	} else if (blend_type == 18) {
		// pin light
		if (bot < 2.0 * top - 1.0) {
			ret = 2.0 * top - 1.0;
		} else if (bot > 2.0 * top) {
			ret = 2.0 * top;
		} else {
			ret = bot;
		}
	} else if (blend_type == 19) {
		// hard mix
		if (top < 1.0 - bot) {
			ret = 0.0;
		} else {
			ret = 1.0;
		}
	} else if (blend_type == 20) {
		// difference
		ret = fabs(top - bot);
	} else if (blend_type == 21) {
		// exclusion
		ret = top + bot - 2.0 * top * bot;
	} else if (blend_type == 22) {
		// substract
		ret = bot - top;
	} else if (blend_type == 23) {
		// divide
		float t = top == 0.0 ? 0.0000001 : top;
		ret = bot / t;
	} else if (blend_type == 28) {
		// average
		ret = (bot + top) * 0.5;
	}

	return ret;
}

color fea_blend(int blend_type, color bot, color top) {
	return color(
		fea_blend(blend_type, bot[0], top[0]),
		fea_blend(blend_type, bot[1], top[1]),
		fea_blend(blend_type, bot[2], top[2])
	);
}

// Given a grayscale float input, creates "level sets"
// and blends according to step_mode (see fea_blend for blend options).
float fea_fancy_step(int step_mode, int step_amount, float in_val) {
	int int_val = int(in_val * step_amount);
	float val = float(int_val) / float(step_amount);
	return fea_blend(step_mode, in_val, val);
}

// Average color components.
float fea_average(color in) {
	return (in[0] + in[1] + in[2]) / 3.0;
}

// For max viewport, :/
// TODO : Find an OK implementation, without bit fiddling.
float fea_cbrt(float x) {
	return pow(abs(x), 0.33333333333333333);
}


// Transforms a color from_space to_space.
// Supports extra color spaces : "oklab", "okhcl" (oklab polar form)
color fea_transformc(string from_space, string to_space, color in_col) {
	if (from_space == to_space) {
		return in_col;
	}

	// Returned color.
	color ret = 0;

	color oklab_to_okhcl(color lab) {
		color ret;
		ret[0] = fea_rad_to_per(atan2(lab[2], lab[1]));
		ret[1] = sqrt(lab[1] * lab[1] + lab[2] * lab[2]);
		ret[2] = lab[0];
		return ret;
	}

	color okhcl_to_oklab(color hcl) {
		color safe = color(
			hcl[0],
			clamp(hcl[1], 0.0, 1.0),
			clamp(hcl[2], 0.0, 1.0)
			// hcl[1],
			// hcl[2]
		);
		float a = safe[1] * cos(fea_per_to_rad(safe[0]));
		float b = safe[1] * sin(fea_per_to_rad(safe[0]));
		return color(safe[2], a, b);
	}

	// Perf shortcuts.
	if (from_space == "oklab" && to_space == "okhcl") {
		ret = oklab_to_okhcl(in_col);
		return ret;
	}

	if (from_space == "okhcl" && to_space == "oklab") {
		ret = okhcl_to_oklab(in_col);
		return ret;
	}

	// oklab transforms.
	matrix m1 = matrix(
		0.8189330101, 0.0329845436, 0.0482003018, 0.0,
		0.3618667424, 0.9293118715, 0.2643662691, 0.0,
		-0.1288597137, 0.0361456387, 0.6338517070, 0.0,
		0.0, 0.0, 0.0, 1.0
	);
	matrix m1_inv = matrix(
		1.22701383, -0.0405801795, -0.0763812810, 0.0,
		-0.557799995, 1.11225688, -0.421481967, 0.0,
		0.281256139, -0.0716766790, 1.58616316, 0.0,
		0.0, 0.0, 0.0, 1.0
	);

	matrix m2 = matrix(
		0.2104542553, 1.9779984951, 0.0259040371, 0.0,
		0.7936177850, -2.4285922050, 0.7827717662, 0.0,
		-0.0040720468, 0.4505937099, -0.8086757660, 0.0,
		0.0, 0.0, 0.0, 1.0
	);
	matrix m2_inv = matrix(
		1.0, 1.0, 1.0, 0.0,
		0.396337777, -0.105561346, -0.0894841850, 0.0,
		0.215803757, -0.0638541728, -1.29148555, 0.0,
		0.0, 0.0, 0.0, 1.0
	);

	color oklab_to_xyz(point lab) {
		point lms = transform(m2_inv, lab);
		lms[0] = lms[0] * lms[0] * lms[0];
		lms[1] = lms[1] * lms[1] * lms[1];
		lms[2] = lms[2] * lms[2] * lms[2];
		return transform(m1_inv, lms); // xyz
	}

	color xyz_to_oklab(point xyz) {
		point lms = transform(m1, xyz);
		lms[0] = fea_cbrt(lms[0]);
		lms[1] = fea_cbrt(lms[1]);
		lms[2] = fea_cbrt(lms[2]);
		return transform(m2, lms); // oklab
	}


	// First, convert anything to xyz.
	if (from_space == "oklab") {
		ret = oklab_to_xyz(in_col);
	} else if (from_space == "okhcl") {
		color lab = okhcl_to_oklab(in_col);
		ret = oklab_to_xyz(lab);
	} else {
		ret = transformc(from_space, "XYZ", in_col);
	}

	// At this point, we have an xyz color in ret.
	// Do our custom conversion, fallback on OSL.
	if (to_space == "oklab") {
		ret = xyz_to_oklab(ret);
	} else if (to_space == "okhcl") {
		color lab = xyz_to_oklab(ret);
		ret = oklab_to_okhcl(lab);
	} else {
		ret = transformc("XYZ", to_space, ret);
	}

	return ret;
}

// Transforms an "rgb" color to_space.
color fea_transformc(string to_space, color in_col) {
	return fea_transformc("rgb", to_space, in_col);
}

// Given the 3 colors and a precentage,
// mix between them (1/3 per color).
color fea_mix(color c1, color c2, color c3, float p) {
	float p1 = clamp(p * 2.0 - 1.0, 0.0, 1.0);
	color temp = mix(c2, c3, p1);

	float p2 = clamp(p * 2.0, 0.0, 1.0);
	return mix(c1, temp, p2);
}

// Given the 4 colors and a precentage,
// mix between them (1/4 per color).
color fea_mix(color c1, color c2, color c3, color c4, float p) {
	float p1 = clamp(p * 3.0 - 2.0, 0.0, 1.0);
	color temp1 = mix(c3, c4, p1);

	float p2 = clamp(p * 3.0 - 1.0, 0.0, 1.0);
	color temp2 = mix(c2, temp1, p2);

	float p3 = clamp(p * 3.0, 0.0, 1.0);
	return mix(c1, temp2, p3);
}

#endif // fea_color_osl