// fea_color osl libraries by Philippe Groarke
// Copyright 2022 Philippe Groarke, All rights reserved. This file is licensed under Apache 2.0 license
// https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt
#ifndef fea_color_osl
#define fea_color_osl 1

// fea_blend enum ui options.
#define fea_blend_opts \
		"None:0" \
		"|Replace:1" \
		"|Darken:3" \
		"|Multiply:4" \
		"|Color Burn:5" \
		"|Linear Burn:6" \
		/*"|Darker Color:7"*/ \
		"|Lighten:8" \
		"|Screen:9" \
		"|Color Dodge:10" \
		"|Linear Dodge (Add):11" \
		/*"|Lighter Color:12"*/ \
		"|Overlay:13" \
		"|Soft Light:14" \
		"|Hard Light:15" \
		"|Vivid Light:16" \
		"|Linear Light:17" \
		"|Pin Light:18" \
		"|Hard Mix:19" \
		"|Difference:20" \
		"|Exclusion:21" \
		"|Substract:22" \
		"|Divide:23" \
		/*"|Hue:24"*/ \
		/*"|Saturation:25"*/ \
		/*"|Color:26"*/ \
		/*"|Luminosity:27"*/ \
		"|Average:28"

// Blend 2 floats using typical color blend modes.
// 'bot' is base layer, 'top' is top layer.
float fea_blend(int blend_type, float bot, float top) {
	// http://www.simplefilter.de/en/basics/mixmods.html

	float ret = bot;
	if (blend_type == 0) {
		// none
		// ret = bot;
	} else if (blend_type == 1) {
		// replace
		ret = top;
	} else if (blend_type == 3) {
		// darken
		ret = min(bot, top);
	} else if (blend_type == 4) {
		// multiply
		ret = bot * top;
	} else if (blend_type == 5) {
		// color burn
		ret = 1 - (1 - bot) / top;
	} else if (blend_type == 6) {
		// linear burn
		ret = bot + top - 1;
	} else if (blend_type == 7) {
		// todo : darker color
	} else if (blend_type == 8) {
		// lighten
		ret = max(bot, top);
	} else if (blend_type == 9) {
		// screen
		ret = 1 - (1 - bot) * (1 - top);
	} else if (blend_type == 10) {
		// color dodge
		ret = bot / (1 - top);
	} else if (blend_type == 11) {
		// linear dodge (add)
		ret = bot + top;
	} else if (blend_type == 12) {
		// todo : lighter color
	} else if (blend_type == 13) {
		// overlay
		if (bot <= 0.5) {
			ret = 2 * bot * top;
		} else {
			ret = 1 - 2 * (1 - bot) * (1 - top);
		}
	} else if (blend_type == 14) {
		// soft light
		ret = (1 - 2 * top) * pow(bot, 2) + 2 * bot * top;
	} else if (blend_type == 15) {
		// hard light
		if (top <= 0.5) {
			ret = 2 * top * bot;
		} else {
			ret = 1 - 2 * (1 - top) * (1 - bot);
		}
	} else if (blend_type == 16) {
		// vivid light
		if (top <= 0.5) {
			ret = 1 - (1 - bot) / (2 * top);
		} else {
			ret = bot / (2 * (1 - top));
		}
	} else if (blend_type == 17) {
		// linear light
		ret = bot + 2 * top - 1;
	} else if (blend_type == 18) {
		// pin light
		if (bot < 2 * top - 1) {
			ret = 2 * top - 1;
		} else if (bot > 2 * top) {
			ret = 2 * top;
		} else {
			ret = bot;
		}
	} else if (blend_type == 19) {
		// hard mix
		if (top < 1 - bot) {
			ret = 0;
		} else {
			ret = 1;
		}
	} else if (blend_type == 20) {
		// difference
		ret = fabs(top - bot);
	} else if (blend_type == 21) {
		// exclusion
		ret = top + bot - 2 * top * bot;
	} else if (blend_type == 22) {
		// substract
		ret = bot - top;
	} else if (blend_type == 23) {
		// divide
		float t = top == 0.0 ? 0.0000001 : top;
		ret = bot / t;
	} else if (blend_type == 28) {
		// average
		ret = (bot + top) * 0.5;
	}

	return ret;
}

vector fea_blend(int blend_type, vector bot, vector top) {
	return vector(
		fea_blend(blend_type, bot[0], top[0]),
		fea_blend(blend_type, bot[1], top[1]),
		fea_blend(blend_type, bot[2], top[2])
	);
}

// Given a grayscale float input, creates "level sets"
// and blends according to step_mode (see fea_blend for blend options).
float fea_fancy_step(int step_mode, int step_amount, float in_val) {
	int int_val = int(in_val * step_amount);
	float val = float(int_val) / float(step_amount);
	return fea_blend(step_mode, in_val, val);
}

// Average color components.
float fea_average(color in) {
	return (in[0] + in[1] + in[2]) / 3.0;
}

// Given the 3 colors and a precentage,
// mix between them (1/3 per color).
color fea_mix(color c1, color c2, color c3, float p) {
	float p1 = clamp(p * 2 - 1, 0, 1);
	color temp = mix(c2, c3, p1);

	float p2 = clamp(p * 2, 0, 1);
	return mix(c1, temp, p2);
}

// Given the 4 colors and a precentage,
// mix between them (1/4 per color).
color fea_mix(color c1, color c2, color c3, color c4, float p) {
	float p1 = clamp(p * 3 - 2, 0, 1);
	color temp1 = mix(c3, c4, p1);

	float p2 = clamp(p * 3 - 1, 0, 1);
	color temp2 = mix(c2, temp1, p2);

	float p3 = clamp(p * 3, 0, 1);
	return mix(c1, temp2, p3);
}

#endif // fea_color_osl