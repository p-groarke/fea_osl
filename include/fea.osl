// fea osl libraries by Philippe Groarke
// Copyright 2022 Philippe Groarke, All rights reserved. This file is licensed under Apache 2.0 license
// https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt
#ifndef fea_osl
#define fea_osl

#define FEA_FLT_MAX 3.402823e+38

/**
 * Conversions
 */

// Converts a precentage to radian.
float fea_per_to_rad(float percent) {
	return percent * M_2PI;
}

// Converts a radian to percentage.
float fea_rad_to_per(float rad) {
	return rad * 0.15915494309189498;
}

// Converts a precentage to degree.
float fea_per_to_deg(float percent) {
	return percent * 360.0;
}

// Converts a degree to percentage.
float fea_deg_to_per(float deg) {
	return deg * 0.00277777777777778;
}

// Converts a degree to radian.
float fea_deg_to_rad(float deg) {
	return radians(deg);
	// return deg * 0.01745329251994330;
}

// Converts a radian to degree.
float fea_rad_to_deg(float rad) {
	return degrees(rad);
	// return rad * 57.295779513082321;
}

// Given a radian angle, returns a 2d vector pointing
// in that direction.
vector fea_angle_to_vec(float rad) {
	return vector(cos(rad), sin(rad), 0);
}


/**
 * Interpolation
 */

// Given a value val, returns the closest multiple.
float fea_closest_multiple(float val, float multiple) {
	if (multiple == 0.0) {
		return 0.0;
	}
	return floor(val / multiple) * multiple;
}

// Floor up to decimal.
float fea_floor_to(float val, float decimal_mul) {
	return floor(val * decimal_mul) / decimal_mul;
}
vector fea_floor_to(vector val, float decimal_mul) {
	return vector (
			floor(val[0] * decimal_mul) / decimal_mul,
			floor(val[1] * decimal_mul) / decimal_mul,
			floor(val[2] * decimal_mul) / decimal_mul
	);
}

// Given x in the range [a, b], converts to percentage.
float fea_to_percent(float x, float a, float b) {
	float ret = clamp(x, a, b);
	return (ret - a) / (b - a);
}

// Linearly interpolate x between a and b.
// x is clamped to [0, 1].
float fea_lerp(float x, float a, float b) {
	float per = clamp(x, 0.0, 1.0);
	return a + per * (b - a);
}

// With x in the range [from_a, from_b], lerp to the range [to_a, to_b].
// Aka, lerp where x is not between 0, 1.
// x is clamped to [from_a, from_b].
float fea_lerp(float x, float from_a, float from_b, float to_a, float to_b) {
	// Remap x into percentage.
	float per = fea_to_percent(x, from_a, from_b);

	// Typical lerp.
	return to_a + per * (to_b - to_a);
}

// Interpolates x, according to the k control, between a and b.
//
// x is clamped to [0, 1]
// k > 0, exponential
// k == 0, linear
// k < 0, logarithmic
//
// https://www.desmos.com/calculator/og836nvwmx
float fea_interp(float x, float k, float a, float b) {
	if (k == 0.0) {
		return fea_lerp(x, a, b);
	}

	float per = clamp(x, 0.0, 1.0);
	return a + ((exp(k * per) - 1.0) / (exp(k) - 1.0)) * (b - a);
}

// With x in the range [from_a, from_b],
// interpolate to the output range [to_a, to_b].
// Using k to control the curve.
//
// x is clamped to [from_a, from_b].
// k > 0, exponential
// k == 0, linear
// k < 0, logarithmic
//
// https://www.desmos.com/calculator/og836nvwmx
float fea_interp(float x, float k, float from_a, float from_b, float to_a, float to_b) {
	if (k == 0.0) {
		return fea_lerp(x, from_a, from_b, to_a, to_b);
	}

	// Remap x into percentage.
	float per = fea_to_percent(x, from_a, from_b);

	// Typical interpolation.
	return to_a + ((exp(k * per) - 1.0) / (exp(k) - 1.0)) * (to_b - to_a);
}

// Original func, legacy.
// Play with k,
// https://www.desmos.com/calculator/og836nvwmx
// k > 0, exponential
// k == 0, linear
// k < 0, logarithmic
float fea_interp(float k, float percent) {
	float ret = 0.0;
	float epsilon = 0.0001;
	if (fabs(k) < epsilon) {
		// Actual k = 0 == 0 always. Just do linear interp.
		ret = percent;
	} else {
		ret = (exp(k * percent) - 1.0) / (exp(k) - 1.0);
	}
	return ret;
}

float fea_average(vector in) {
	return (in[0] + in[1] + in[2]) / 3.0;
}


/**
 * Math Utils
 */

// Clouds (aka Fractal Brownian Motion).
float fea_fbm(int iterations, vector coord, float phase) {
	float ret = 0.0;

	for (int i = 1; i < iterations + 1; ++i) {
		float size = i / float(iterations);
		ret += noise("usimplex", coord / size, phase + size) * size;
	}

	ret /= float(iterations);
	return ret;
}

// Returns squared magnitude.
float fea_length_squared(vector x) {
	return dot(x, x);
}

// sin from 0 to 1
float fea_usin(float x) {
	return (sin(x) + 1.0) * 0.5;
}
vector fea_usin(vector x) {
	return (sin(x) + 1.0) * 0.5;
}

// cos from 0 to 1
float fea_ucos(float x) {
	return (cos(x) + 1.0) * 0.5;
}
vector fea_ucos(vector x) {
	return (cos(x) + 1.0) * 0.5;
}

#endif // fea_osl