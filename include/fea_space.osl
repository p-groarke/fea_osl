// fea_round osl libraries by Philippe Groarke
// Copyright 2022 Philippe Groarke, All rights reserved. This file is licensed under Apache 2.0 license
// https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt
#ifndef fea_space_osl
#define fea_space_osl

// Returns a single axis index, the value of the lowest component.
int fea_min_axis(vector x) {
	// Don't use for loop because OSL lol.
	int ret = 0;
	if (x[1] < x[ret]) {
		ret = 1;
	}
	if (x[2] < x[ret]) {
		ret = 2;
	}
	return ret;
}

// Returns a single axis index, the value of the highest component.
int fea_max_axis(vector x) {
	// Don't use for loop because OSL lol.
	int ret = 0;
	if (x[1] > x[ret]) {
		ret = 1;
	}
	if (x[2] > x[ret]) {
		ret = 2;
	}
	return ret;
}

// Returns the lowest component of x.
float fea_min_component(vector x) {
	return min(x[0], min(x[1], x[2]));
}

float fea_max_component(vector x) {
	return max(x[0], max(x[1], x[2]));
}

// Build TBN matrix, imprecise.
matrix fea_tbn() {
	/* The normals and tangents are in world space. */
	/* Note, we recompute the whole shebang to try and get */
	/* a smooth TBN matrix. dPdu, dPdv are per vertex. */
	vector n = normalize(N); // Fix shader imprecision.
	vector t = normalize(dPdu);
	vector b = cross(n, t);
	t = cross(b, n);

	return matrix(
		t[0], t[1], t[2], 0,
		b[0], b[1], b[2], 0,
		n[0], n[1], n[2], 0,
		0, 0, 0, 1
	);
}

// Transforms coordinate from one space to another.
// Adds support of "tangent" space, in addition to OSL spaces.
#define fea_imp_transform_gen(ptype) \
ptype fea_transform(string from_space, string to_space, ptype x) { \
	if (from_space == to_space) { \
		return x; \
	} \
	if (from_space != "tangent" && to_space != "tangent") { \
		return transform(from_space, to_space, x); \
	} \
\
	matrix tbn = fea_tbn(); \
	ptype ret = x; \
	if (from_space == "tangent") { \
		ret = transform(tbn, ret); \
		if (to_space != "world") { \
			ret = transform("world", to_space, ret); \
		} \
	} else if (to_space == "tangent") { \
		matrix tbn_t = transpose(tbn); \
		if (from_space != "world") { \
			ret = transform(from_space, "world", ret); \
		} \
		ret = transform(tbn_t, ret); \
	} \
	return ret; \
}

fea_imp_transform_gen(point)
fea_imp_transform_gen(vector)
fea_imp_transform_gen(normal)

// Assumes "common" from_space.
point fea_transform(string to_space, point x) {
	return fea_transform("common", to_space, x);
}
vector fea_transform(string to_space, vector x) {
	return fea_transform("common", to_space, x);
}
normal fea_transform(string to_space, normal x) {
	return fea_transform("common", to_space, x);
}

#endif