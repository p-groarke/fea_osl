// TilingSimplex Shader
// TilingSimplex by Philippe Groarke
// Copyright 2022 Philippe Groarke, All rights reserved. This file is licensed under Apache 2.0 license
// https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt

#include "D:\code\3dsmax-plugins\OSL\FeaOSL\include\fea.osl"
#include "D:\code\3dsmax-plugins\OSL\FeaOSL\include\fea_tsimplex.osl"
#include "D:\code\3dsmax-plugins\OSL\FeaOSL\include\fea_functional.osl"

// add uv map control
// add time


shader TilingSimplex
[[
	string label = "Tiling Simplex",
	string help	=
		"<h3>Tiling Simplex</h3>"
		"A tiling simplex noise.<br>Port of Stefan Gustavson's and Ian McEwan's GLSL implementation."
		,
]]
(
	int in_fbm_octaves = 3
	[[
		string label = "Octaves",
		string help = "How many octaves used for the fractal brownian motion (clouds).",
		int min = 1,
		int max = 6,
		// int connectable = 0,
		// string packName = "Octaves / Lacunarity",
	]],

	float in_lacunarity = 1.8
	[[
		string label = "Lacunarity",
		string help = "The frequency growth factor used by the fractalization.",
		float min = 0.01,
		// int connectable = 0,
		// string packName = "Octaves / Lacunarity",
	]],

	vector in_tiling = 0.0
	[[
		string label = "Tile Size",
		string help = "These are the x, y, z periods, used to tile the noise. [0, 0, 0] disables tiling (infinite noise).",
		float max = 289.0,
	]],

	FEA_SPACER(0)

	float in_low_clamp = 0.0
	[[
		string label = "Low Value",
		string help = "The minimum value of the noise. Hard clamped.",
		float min = 0.0,
		float max = 1.0,
		// string packName = "High / Low Clamp",
	]],

	float in_high_clamp = 1.0
	[[
		string label = "High Value",
		string help = "The maximum value of the noise. Hard clamped.",
		float min = 0.0,
		float max = 1.0,
		// string packName = "High / Low Clamp",
	]],

	color in_low_color = 0
	[[
		string label = "Low Color",
		string help = "The dark color (noise == 0).",
	]],

	color in_high_color = 1
	[[
		string label = "High Color",
		string help = "The light color (noise == 1).",
	]],

	FEA_SPACER(1)

	float in_phase = 0.0
	[[
		string label = "Phase",
		string help = "Used to animate the noise. Rotates the underlying random points.",
	]],

	float in_uv_scale = 1.0
	[[
		string label = "UV Scale",
		string help = "Scale your UVWs up or down. For more betterer transformations, use UVW Transform node.",
		float min = 0.00001,
		int connectable = 0,
	]],

	point in_uvw = transform("object", P)
	[[
		string label = "UVW",
		string help = "Transformed UVW coordinates. Animate 'w' with scene time for interesting results.",
	]],

	output color Out = 0,
	output color Gradient = 0,
	output color SecondDeriv = 0,
	output color SecondDeriv2 = 0
)
{
	point coord = in_uvw / in_uv_scale;

	fea_tsimplex_ret eval_noise(float freq) {
		return fea_utsimplex(coord * freq, in_tiling * freq, fea_per_to_rad(in_phase));
	}

	fea_tsimplex_ret ret = fea_make_tsimplex_ret();
	fea_fractalize(in_fbm_octaves, in_lacunarity, eval_noise, ret);

	ret.value = fea_lerp(ret.value, in_low_clamp, in_high_clamp, 0, 1);

	Out = mix(in_low_color, in_high_color, ret.value);
	Gradient = ret.gradient;
	SecondDeriv = ret.dg;
	SecondDeriv2 = ret.dg2;
}