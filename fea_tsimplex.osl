// OSL port of :
// psrdnoise (c) 2021 Stefan Gustavson and Ian McEwan
// Published under the MIT license.
// https://github.com/stegu/psrdnoise/

// Paper :
// https://jcgt.org/published/0011/01/02/
#define fea_tsimplex_osl 1
#include <vector2.h>
#include <vector4.h>

// Headers re-implemented here to eliminate include recursion
// and improve portability.
#ifndef fea_glsl_compat_osl
vector make_vector(vector2 x, float y) {
	return vector(x.x, x.y, y);
}
vector make_vector(float x, vector2 y) {
	return vector(x, y.x, y.y);
}

vector4 make_vector4(float v) {
	return vector4(v, v, v, v);
}

vector fract(vector in) {
	return in - floor(in);
}

vector4 mod(vector4 x, float y) {
	return vector4(mod(x.x, y), mod(x.y, y), mod(x.z, y), mod(x.w, y));
}

vector greaterThan(vector x, vector y) {
	vector ret = vector(0);
	for (int i = 0; i < 3; ++i) {
		ret[i] = float(x[i] > y[i]);
	}
	return ret;
}

// Since OSL doesn't have a bool vector,
// the floats are interpreted as :
// Anything other than 0.0 is true.
int any(vector x) {
	int ret = 0;
	for (int i = 0; i < 3; ++i) {
		ret |= x[i] != 0.0;
	}
	return ret;
}

// Makes an OSL row-major matrix from a GLSL column-major matrix.
matrix make_matrix_from_cm(float m00, float m01, float m02,
		float m10, float m11, float m12,
		float m20, float m21, float m22) {
	return matrix(
		m00, m10, m20, 0,
		m01, m11, m21, 0,
		m02, m12, m22, 0,
		0, 0, 0, 1
	);
}
#endif // fea_glsl_compat

#ifndef fea_x
#define fea_x(val) val.x
#endif
#ifndef fea_y
#define fea_y(val) val.y
#endif
#ifndef fea_z
#define fea_z(val) val.z
#endif
#ifndef fea_xy
#define fea_xy(val) \
	vector2(fea_x(val), fea_y(val))
#endif
#ifndef fea_xyx
#define fea_xyx(val) \
	vector(fea_x(val), fea_y(val), fea_x(val))
#endif
#ifndef fea_yzx
#define fea_yzx(val) \
	vector(fea_y(val), fea_z(val), fea_x(val))
#endif
#ifndef fea_yzz
#define fea_yzz(val) \
	vector(fea_y(val), fea_z(val), fea_z(val))
#endif

// The return values of fea_tsimplex
struct fea_tsimplex_ret {
	float value; // The noise value.
	vector gradient; // The noise gradient.
	vector dg; // 2nd order derivative (d2n/dx2, d2n/dy2, d2n/dz2).
	vector dg2; // 2nd order derivative (d2n/dxy, d2n/dyz, d2n/dxz).
};

fea_tsimplex_ret fea_make_tsimplex_ret() {
	return fea_tsimplex_ret(0, 0, 0, 0);
}

fea_tsimplex_ret __operator__add__(fea_tsimplex_ret lhs, fea_tsimplex_ret rhs) {
	return fea_tsimplex_ret(
		lhs.value + rhs.value,
		lhs.gradient + rhs.gradient,
		lhs.dg + rhs.dg,
		lhs.dg2 + rhs.dg2
	);
}

fea_tsimplex_ret __operator__sub__(fea_tsimplex_ret lhs, fea_tsimplex_ret rhs) {
	return fea_tsimplex_ret(
		lhs.value - rhs.value,
		lhs.gradient - rhs.gradient,
		lhs.dg - rhs.dg,
		lhs.dg2 - rhs.dg2
	);
}

fea_tsimplex_ret __operator__mul__(fea_tsimplex_ret lhs, fea_tsimplex_ret rhs) {
	return fea_tsimplex_ret(
		lhs.value * rhs.value,
		lhs.gradient * rhs.gradient,
		lhs.dg * rhs.dg,
		lhs.dg2 * rhs.dg2
	);
}
fea_tsimplex_ret __operator__mul__(fea_tsimplex_ret lhs, float rhs) {
	return fea_tsimplex_ret(
		lhs.value * rhs,
		lhs.gradient * rhs,
		lhs.dg * rhs,
		lhs.dg2 * rhs
	);
}

fea_tsimplex_ret __operator__div__(fea_tsimplex_ret lhs, fea_tsimplex_ret rhs) {
	return fea_tsimplex_ret(
		lhs.value / rhs.value,
		lhs.gradient / rhs.gradient,
		lhs.dg / rhs.dg,
		lhs.dg2 / rhs.dg2
	);
}
fea_tsimplex_ret __operator__div__(fea_tsimplex_ret lhs, float rhs) {
	return fea_tsimplex_ret(
		lhs.value / rhs,
		lhs.gradient / rhs,
		lhs.dg / rhs,
		lhs.dg2 / rhs
	);
}

// 3-D tiling simplex noise with rotating gradients and first and
// second order analytical derivatives.
// "vector x" is the point (x,y,z) to evaluate
// "vector period" is the desired periods along x,y,z, up to 289.
// "float alpha" is the rotation (in radians) for the swirling gradients.
// The "float" return value is the noise value n,
// the "out vector gradient" argument returns the x,y,z 1st order derivatives,
// and "out vector dg, out vector dg2" return the 2nd order derivatives, with
// dg = (d2n/dx2, d2n/dy2, d2n/dz2) dg2 = (d2n/dxy, d2n/dyz, d2n/dxz).
//
// The function executes 15% faster if alpha is dynamically constant == 0.0
// across all fragments being executed in parallel.
// (This speedup will not happen if FASTROTATION is enabled. Do not specify
// FASTROTATION if you are not actually going to use the rotation.)
//
// Setting any period to 0.0 or a negative value will skip the periodic
// wrap for that dimension. Setting all periods to 0.0 makes the function
// execute about 10% faster.
//
// Not using the return values for the first or second order derivatives
// will make the compiler eliminate the code for computing that value.
// Not using "dg" and "dg2" speeds up the function by 15-20%. Using
// none of "gradient", "dg" and "dg2" speeds up the function by 25-30%.
fea_tsimplex_ret fea_tsimplex(vector x, vector period, float alpha) {
	// Permutation polynomial for the hash value
	vector permute(vector i) {
		vector im = mod(i, 289.0);
		return mod(((im * 34.0) + 10.0) * im, 289.0);
	}
	vector4 permute(vector4 i) {
		vector4 im = mod(i, 289.0);
		return mod(((im * 34.0) + 10.0) * im, 289.0);
	}

	// Return value, uses struct to support fractalize macro.
	fea_tsimplex_ret ret = fea_make_tsimplex_ret();

	// Transformation matrices for the axis-aligned simplex grid
	matrix M = make_matrix_from_cm(
		0.0, 1.0, 1.0,
		1.0, 0.0, 1.0,
		1.0, 1.0, 0.0
	);

	matrix Mi = make_matrix_from_cm(
		-0.5, 0.5, 0.5,
		0.5,-0.5, 0.5,
		0.5, 0.5,-0.5
	);

	vector uvw;

	// Transform to simplex space (tetrahedral grid)
	// Use matrix multiplication, let the compiler optimise
	uvw = transform(M, x);


	// Determine which simplex we're in, i0 is the "base corner"
	vector i0 = floor(uvw);
	vector f0 = fract(uvw); // coords within "skewed cube"

	// To determine which simplex corners are closest, rank order the
	// magnitudes of u,v,w, resolving ties in priority order u,v,w,
	// and traverse the four corners from largest to smallest magnitude.
	// o1, o2 are offsets in simplex space to the 2nd and 3rd corners.
	vector g_ = step(fea_xyx(f0), fea_yzz(f0)); // Makes comparison "less-than"
	vector l_ = 1.0 - g_; // complement is "greater-or-equal"
	vector g = make_vector(l_.z, fea_xy(g_));
	vector l = make_vector(fea_xy(l_), g_.z);
	vector o1 = min( g, l );
	vector o2 = max( g, l );

	// Enumerate the remaining simplex corners
	vector i1 = i0 + o1;
	vector i2 = i0 + o2;
	vector i3 = i0 + vector(1.0);

	vector v0, v1, v2, v3;

	// Transform the corners back to texture space
	v0 = transform(Mi, i0);
	v1 = transform(Mi, i1);
	v2 = transform(Mi, i2);
	v3 = transform(Mi, i3);

	// Compute vectors to each of the simplex corners
	vector x0 = x - v0;
	vector x1 = x - v1;
	vector x2 = x - v2;
	vector x3 = x - v3;

	if(any(greaterThan(period, vector(0.0)))) {

		// Wrap to periods and transform back to simplex space
		vector4 vx = vector4(v0.x, v1.x, v2.x, v3.x);
		vector4 vy = vector4(v0.y, v1.y, v2.y, v3.y);
		vector4 vz = vector4(v0.z, v1.z, v2.z, v3.z);

		// Wrap to periods where specified
		if(period.x > 0.0) vx = mod(vx, period.x);
		if(period.y > 0.0) vy = mod(vy, period.y);
		if(period.z > 0.0) vz = mod(vz, period.z);

		// Transform back
		i0 = transform(M, vector(vx.x, vy.x, vz.x));
		i1 = transform(M, vector(vx.y, vy.y, vz.y));
		i2 = transform(M, vector(vx.z, vy.z, vz.z));
		i3 = transform(M, vector(vx.w, vy.w, vz.w));

		// Fix rounding errors
		i0 = floor(i0 + 0.5);
		i1 = floor(i1 + 0.5);
		i2 = floor(i2 + 0.5);
		i3 = floor(i3 + 0.5);
	}

	// Compute one pseudo-random hash value for each corner
	vector4 hash = permute( permute( permute(
		vector4(i0.z, i1.z, i2.z, i3.z ))
		+ vector4(i0.y, i1.y, i2.y, i3.y ))
		+ vector4(i0.x, i1.x, i2.x, i3.x ));

	// Compute generating gradients from a Fibonacci spiral on the unit sphere
	vector4 theta = hash * 3.883222077;  // 2*pi/golden ratio
	vector4 sz    = hash * -0.006920415 + 0.996539792; // 1-(hash+0.5)*2/289
	vector4 psi   = hash * 0.108705628 ; // 10*pi/289, chosen to avoid correlation

	vector4 Ct = cos(theta);
	vector4 St = sin(theta);
	vector4 sz_prime = sqrt( 1.0 - sz*sz ); // s is a point on a unit fib-sphere

	vector4 gx, gy, gz;

	// Rotate gradients by angle alpha around a pseudo-random ortogonal axis
// #ifdef FASTROTATION
	// Fast algorithm, but without dynamic shortcut for alpha = 0
	vector4 qx = St; // q' = norm ( cross(s, n) )  on the equator
	vector4 qy = -Ct;
	vector4 qz = make_vector4(0.0);

	vector4 px =  sz * qy; // p' = cross(q, s)
	vector4 py = -sz * qx;
	vector4 pz = sz_prime;

	psi += alpha; // psi and alpha in the same plane
	vector4 Sa = sin(psi);
	vector4 Ca = cos(psi);

	gx = Ca * px + Sa * qx;
	gy = Ca * py + Sa * qy;
	gz = Ca * pz + Sa * qz;
// #else
// 	// Slightly slower algorithm, but with g = s for alpha = 0, and a
// 	// strong conditional speedup for alpha = 0 across all fragments
// 	if(alpha != 0.0) {
// 			vector4 Sp = sin(psi); // q' from psi on equator
// 			vector4 Cp = cos(psi);

// 			vector4 px = Ct * sz_prime; // px = sx
// 			vector4 py = St * sz_prime; // py = sy
// 			vector4 pz = sz;

// 			vector4 Ctp = St*Sp - Ct*Cp; // q = (rotate( cross(s,n), dot(s,n))(q')
// 			vector4 qx = mix( Ctp*St, Sp, sz);
// 			vector4 qy = mix(-Ctp*Ct, Cp, sz);
// 			vector4 qz = -(py*Cp + px*Sp);

// 			vector4 Sa = make_vector4(sin(alpha)); // psi and alpha in different planes
// 			vector4 Ca = make_vector4(cos(alpha));

// 			gx = Ca * px + Sa * qx;
// 			gy = Ca * py + Sa * qy;
// 			gz = Ca * pz + Sa * qz;
// 	} else {
// 			gx = Ct * sz_prime; // alpha = 0, use s directly as gradient
// 			gy = St * sz_prime;
// 			gz = sz;
// 	}
// #endif

	// Reorganize for dot products below
	vector g0 = vector(gx.x, gy.x, gz.x);
	vector g1 = vector(gx.y, gy.y, gz.y);
	vector g2 = vector(gx.z, gy.z, gz.z);
	vector g3 = vector(gx.w, gy.w, gz.w);

	// Radial decay with distance from each simplex corner
	vector4 w = 0.5 - vector4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));
	w = max(w, 0.0);
	vector4 w2 = w * w;
	vector4 w3 = w2 * w;

	// The value of the linear ramp from each of the corners
	vector4 gdotx = vector4(dot(g0,x0), dot(g1,x1), dot(g2,x2), dot(g3,x3));

	// Multiply by the radial decay and sum up the noise value
	float n = dot(w3, gdotx);

	// Compute the first order partial derivatives
	vector4 dw = -6.0 * w2 * gdotx;
	vector dn0 = w3.x * g0 + dw.x * x0;
	vector dn1 = w3.y * g1 + dw.y * x1;
	vector dn2 = w3.z * g2 + dw.z * x2;
	vector dn3 = w3.w * g3 + dw.w * x3;
	ret.gradient = 39.5 * (dn0 + dn1 + dn2 + dn3);

	// Compute the second order partial derivatives
	vector4 dw2 = 24.0 * w * gdotx;
	vector dga0 = dw2.x * x0 * x0 - 6.0 * w2.x * (gdotx.x + 2.0 * g0 * x0);
	vector dga1 = dw2.y * x1 * x1 - 6.0 * w2.y * (gdotx.y + 2.0 * g1 * x1);
	vector dga2 = dw2.z * x2 * x2 - 6.0 * w2.z * (gdotx.z + 2.0 * g2 * x2);
	vector dga3 = dw2.w * x3 * x3 - 6.0 * w2.w * (gdotx.w + 2.0 * g3 * x3);
	ret.dg = 35.0 * (dga0 + dga1 + dga2 + dga3); // (d2n/dx2, d2n/dy2, d2n/dz2)
	vector dgb0 = dw2.x * x0 * fea_yzx(x0) - 6.0 * w2.x * (g0 * fea_yzx(x0) + fea_yzx(g0) * x0);
	vector dgb1 = dw2.y * x1 * fea_yzx(x1) - 6.0 * w2.y * (g1 * fea_yzx(x1) + fea_yzx(g1) * x1);
	vector dgb2 = dw2.z * x2 * fea_yzx(x2) - 6.0 * w2.z * (g2 * fea_yzx(x2) + fea_yzx(g2) * x2);
	vector dgb3 = dw2.w * x3 * fea_yzx(x3) - 6.0 * w2.w * (g3 * fea_yzx(x3) + fea_yzx(g3) * x3);
	ret.dg2 = 39.5 * (dgb0 + dgb1 + dgb2 + dgb3); // (d2n/dxy, d2n/dyz, d2n/dxz)

	// Scale the return value to fit nicely into the range [-1,1]
	ret.value = 39.5 * n;
	return ret;
}

fea_tsimplex_ret fea_utsimplex(point x, vector period, float phase) {
	fea_tsimplex_ret ret = fea_tsimplex(x, period, phase);
	ret.value = (ret.value + 1.0) * 0.5;
	return ret;
}
